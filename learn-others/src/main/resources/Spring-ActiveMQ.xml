<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd"
       default-autowire="byName" >

    <context:property-placeholder ignore-unresolvable="true" file-encoding="utf-8"
                                  location="classpath:Spring-ActiveMQ.properties"/>
    <context:component-scan base-package="com.yd" use-default-filters="true">
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>-->
    </context:component-scan>

    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${activeMQ.brokerURL}"/>
        <property name="userName" value="${activeMQ.userName}"/>
        <property name="password" value="${activeMQ.password}"/>
        <property name="trustAllPackages" value="true"/>
    </bean>

    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="${activeMQ.maxConnections}"/>
    </bean>

    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>

    <!-- Spring JmsTemplate 的消息生产者 start-->
    <!-- 定义JmsTemplate的Queue类型 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <constructor-arg ref="connectionFactory"/>
        <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
        <property name="pubSubDomain" value="false"/>
    </bean>

    <!--这个是队列目的地，点对点的-->
    <bean id="goodsOrgQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${activeMQ.goodsOrgQueue}</value>
        </constructor-arg>
    </bean>

    <bean id="goodsInfoQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>${activeMQ.goodsInfoQueue}</value>
        </constructor-arg>
    </bean>
    <!--这个是主题目的地，一对多的-->
    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="${activeMQ.topic}"/>
    </bean>

    <!--&lt;!&ndash; 消息监听器 &ndash;&gt;-->
    <!--<bean id="consumerMessageListener" class="com.mq.activemq.service.ConsumerMessageListener"/>-->
    <!--&lt;!&ndash; 消息监听容器 &ndash;&gt;-->
    <!--<bean id="jmsContainer"-->
          <!--class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
        <!--<property name="connectionFactory" ref="connectionFactory" />-->
        <!--<property name="destination" ref="queueDestination" />-->
        <!--<property name="messageListener" ref="consumerMessageListener" />-->
        <!--<property name="sessionTransacted" value="true"/>-->
        <!--&lt;!&ndash; <property name="transactionManager" ref="jtaTransactionManager"/> &ndash;&gt;-->
    <!--</bean>-->

    <!--<bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>-->


</beans>